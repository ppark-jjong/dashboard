pip install -r requirement.txt
python -m pip install --upgrade pip
python -m venv venv
venv\Scripts\activate
deactivate


protoc -I . --python_out=. proto/book_data.proto


docker-compose up -d

=============================================================
# Kafka CLI 명령어를 사용하여 토픽 목록 조회
docker exec -it kafka kafka-topics --list --bootstrap-server localhost:9092


==================================================================


main/                       # 프로젝트 루트 디렉토리
│
├── data/                   # 데이터 관련 파일들 (예: 샘플 데이터, CSV 파일 등)
│
├── proto/                  # Protobuf 정의 파일 디렉토리
│   └── book_data.proto     # Protobuf 정의 파일
│
├── src/                    # 소스 코드 디렉토리
│   ├── __init__.py         # 패키지 초기화 파일
│   ├── main.py             # 메인 실행 파일 (진입점)
│   ├── producer.py         # Kafka Producer 관련 코드
│   ├── consumer.py         # Kafka Consumer 관련 코드 (필요 시)
│   ├── data_fetcher.py     # 데이터 수집 코드 (예: Kakao API 호출)
│   ├── serializers.py      # 데이터 직렬화 및 역직렬화 코드
│   └── book_data_pb2.py    # Protobuf 컴파일된 Python 파일 (protoc로 생성)
│
├── main/                   # 메인 설정 및 기타 주요 파일들
│   ├── config/             # 설정 파일 디렉토리
│   │   └── config.py       # Kafka 설정, API 키 등
│
├── dags/                   # Airflow DAG 파일 (필요 시)
│   └── example_dag.py      # Airflow DAG 정의 파일
│
├── tests/                  # 테스트 코드 디렉토리
│   ├── __init__.py         # 테스트 패키지 초기화 파일
│   ├── test_producer.py    # Producer 관련 테스트
│   ├── test_consumer.py    # Consumer 관련 테스트
│   └── test_serializers.py # 직렬화 관련 테스트
│
├── requirements.txt        # 프로젝트에서 사용하는 Python 라이브러리 목록
│
├── Dockerfile              # Docker 환경 설정 파일 (필요 시)
│
└── README.md               # 프로젝트 설명 파일

1. 실시간 배송 상태 및 KPI 모니터링
목표: 오늘 날짜의 각 배송 상태별 갯수, 완료율, 평균 배송 시간을 모니터링하여 실시간으로 성과를 확인.

2. 이슈 모니터링
목표: 이번 주 동안 발생한 이슈 갯수와 관련된 DPS 번호를 추적.

3. 배송 거리 분석
목표: 이번 주의 평균 배송 거리를 계산하여 분석.

4. 배송 완료율 트렌드 분석
목표: 주별로 배송 완료율의 변화를 분석하여 성과 추적.

5. 이슈 발생 패턴 분석
목표: 요일별 이슈 발생 패턴을 분석하여 빈도 파악.

==================================================================

현재 docker-compose.yaml로 구축한 컨테이너별 포트 구성도
Zookeeper	2181	22181	Kafka 메타데이터 관리 및 클러스터 조정
Kafka	9092	29092	메시지 브로커로서의 데이터 스트리밍 관리
Spark Master	7077	8080	클러스터 관리 및 작업 스케줄링
Spark Worker	N/A	8081	Spark 작업을 실제로 수행하는 워커 노드
Redis	6379	6379	실시간 데이터 저장 및 빠른 조회
Airflow	8080	8082	데이터 파이프라인 관리 및 스케줄링 UI 접근




