1. 패키지 설치 및 환경 설정 명령어

pip install -r requirements.txt           # 의존성 패키지 설치
python -m pip install --upgrade pip       # pip 업그레이드
python -m venv venv                       # 가상 환경 생성
venv\Scripts\activate                     # 가상 환경 활성화
deactivate                                # 가상 환경 비활성화

C:\MyMain\config\Scripts\activate.ps1 #수동 활성화


netstat -a -o                             # 네트워크 포트 확인
taskkill /f /pid PID번호                  # 특정 PID 프로세스 종료

protoc -I=protos --python_out=protos protos/delivery_status.proto        # ProtoBuf 컴파일
protoc --proto_path=. -I . --python_out=. --pyi_out=. ./realtime_status.proto  # 실시간 상태 proto 파일 컴파일



======================================================================================
2. Docker 및 Docker Compose 명령어

docker-compose down                                   # 기존 컨테이너 중지 및 제거
docker-compose build                                  # Docker 이미지 빌드
docker-compose -f docker/DockerFile build --no-cache  # Docker 이미지 빌드 (캐시 미사용)
docker-compose up                                     # Docker 컨테이너 실행
docker-compose up -d                                  # Docker 컨테이너 실행 (백그라운드 모드)
docker-compose -f docker/docker-compose.yaml up -d    # 특정 compose 파일 실행

docker-compose ps                                     # 실행 상태 확인
docker images                                         # 도커 이미지 목록 확인
docker-compose logs -f                                # 실시간 로그 확인

docker exec -it <container_name> /bin/bash            # 컨테이너 내부 접근
docker cp test-kafka.py <container_name>:/path/to/new_directory/  # 컨테이너에 파일 복사


docker-compose -f docker-compose-dev.yaml down
docker-compose -f docker-compose-dev.yaml up --build

docker exec -it <컨테이너_ID>


======================================================================================
3. Kafka CLI 명령어

docker exec -it kafka kafka-topics --list --bootstrap-server localhost:9092  # Kafka 토픽 목록 조회
/usr/bin/kafka-topics --bootstrap-server localhost:9092 --delete --topic delivery-data  # 특정 토픽 삭제


4. Redis 명령어
서버 실행
redis-server.exe

다른 포트로 실행
redis-server.exe --port 6380

포트번호로 포트 점유 확인


PID를 통해 프로세스 애플리케이션 확인
tasklist | findstr 8444

서버 종료 (포트 다운) 보통 PID를 봐야함
taskkill /PID 8444 /F



======================================================================================
4. Google Cloud Platform (GCP) 명령어

gcloud auth activate-service-account --key-file=C:\MyMain\dashboard\secrets\google\credentials.json  # 서비스 계정 인증
gcloud init                                   # 초기화
gcloud auth login                             # 인증 로그인
gcloud auth list                              # 인증 목록 조회
gcloud config set project [PROJECT_ID]        # 프로젝트 ID 설정
gcloud config set account                     # 계정 설정
gcloud projects list                          # 프로젝트 목록 조회
gcloud auth revoke --all                      # 모든 인증 해제

$PROJECT_ID = "dashboard-440518"
$IMAGE_NAME = "fastapi-webhook"

docker run -e PORT=8080 -p 8080:8080 asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwah-data/${IMAGE_NAME}:latest  # Docker 실행
docker build --no-cache -t asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwahkr-artifactregistry/${IMAGE_NAME}:latest -f docker/Dockerfile-fastapi .  # Docker 이미지 빌드
docker push asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwahkr-artifactregistry/${IMAGE_NAME}:latest  # Artifact Registry에 이미지 푸시
gcloud auth configure-docker asia-northeast3-docker.pkg.dev  # Artifact Registry Docker 인증
gcloud run deploy SERVICE_NAME --image=asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwah-data/${IMAGE_NAME}:latest --region=asia-northeast3  # 수동 배포




====================================================================================
5. Cloud Function 로컬 테스트 명령어

# Functions Framework 구동
python -m functions_framework --target=kafka_stream --source=src/api/cloud_function_api.py  

# 로컬 Cloud Function 데이터 테스트
Invoke-WebRequest -Uri "http://127.0.0.1:8080" -Method POST -ContentType "application/json" -InFile "data/data.json"  

Invoke-WebRequest -Uri "http://127.0.0.1:8080/webhook" -Method POST -ContentType "application/json" -InFile "data/data.json"



# 로컬에서 Uvicorn 구동
uvicorn src.api.main_api:app --host 0.0.0.0 --port 8080


6. Redis


=============================================================================
7. 프로젝트 구조 (파일 및 폴더)

main/
│
├── README.md                    # 프로젝트 문서
├── requirements.txt             # 파이썬 패키지 의존성
├── Dockerfile                   # 컨테이너화
├── docker-compose.yml           # 로컬 개발 환경 설정
├── .env			            # 환경 변수 템플릿
├── .gitignore
│
├── src/                         # 메인 애플리케이션 패키지
│   ├── __init__.py
│   ├── main.py                 # Flask/Dash 앱 초기화
│   │
│   ├── config/                   # 핵심 설정 및 유틸리티
│   │   ├── __init__.py
│   │   ├── config_app.py          # 앱 설정
│   │   ├── security.py        # 인증/인가
│   │   └── logging.py         # 로깅 설정
│   │
│   ├── models/                 # SQLAlchemy 모델
│   │   ├── __init__.py
│   │   ├── delivery.py
│   │   └── return.py
│   │
│   ├── schemas/               # Pydantic 스키마
│   │   ├── __init__.py
│   │   ├── delivery.py
│   │   └── driver.py
│   │
│   ├── storage/               # 데이터 저장소 관련
│   │   ├── __init__.py
│   │   ├── cloud_sql.py      # Cloud SQL 연결
│   │   ├── redis.py   		# Redis 연결
│   │   └── bigquery.py       # BigQuery 클라이언트
│   │
│   ├── services/              # 비즈니스 로직
│   │   ├── __init__.py
│   │   ├── delivery.py       # 배송 서비스
│   │   ├── analytics.py      # 분석 서비스
│   │   └── pubsub.py        # Pub/Sub 메시지 처리
│   │
│   ├── data_processing/      # 데이터 처리
│   │   ├── __init__.py
│   │   ├── delivery_analytics.py      # PySpark 작업
│   │   └── data_pipline.py		# ETL 파이프라인
│   │
│   ├── api/                 # REST API
│   │   ├── __init__.py
│   │   ├── __init__.py
│   │   ├── delivery.py
│   │
│   ├── dash_app/           # Dash 애플리케이션
│   │   ├── __init__.py
│   │   ├── index.py      	# dash main 실행점
│   │   ├── main.py		# main 페이지
│   │   ├── dashboard.py	# dashboard 페이지
│   │   ├── kpi.py		# kpi 페이지
│   │   ├── navbar.py		# navbar 공통 컴포넌트
│   │   ├── callbacks/    # Dash 콜백
│   │       ├── __init__.py
│   │       ├── dashboard_callbacks.py
│   │       ├── kpi_callbacks.py
│   │       └── main_callbacks.py
│   │   ├── assets/    # css
│   │       ├── __init__.py
│   │       ├── custom.css

====================================================================================
8. 추가 JAR 파일 목록

commons-pool2-2.11.1.jar
kafka-clients-3.4.0.jar
spark-protobuf_2.12-3.4.1.jar
spark-sql-kafka-0-10_2.12-3.4.1.jar
spark-token-provider-kafka-0-10_2.12-3.4.1.jar
====================================================================================


목록 조회 (GET /api/dashboardData)

필터/검색/페이지네이션을 쿼리 파라미터로 받고, JSON 형태로 대시보드 데이터를 반환한다.
totalCount, data를 함께 주어야 프론트에서 페이지 정보 갱신 가능.
드라이버 목록 조회 (GET /api/drivers)

기사 드롭다운을 채울 수 있는 기본 정보(ID, 이름, 연락처 등) 반환.
기사 할당 (POST /api/assignDriver)

여러 “대기” 상태 배송을 한 번에 특정 기사에게 할당.
성공 시 “진행” 상태로 바뀌며, depart_time이 기록될 수 있음.
상태 변경 (PUT /api/dashboardData/:dps/status)

상세 모달에서 라디오 버튼으로 상태 변경.
“대기 → 진행” 시 depart_time, “진행 → 완료/이슈” 시 completed_time 등을 처리.

