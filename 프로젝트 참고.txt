1. 패키지 설치 및 환경 설정 명령어

pip install -r requirements.txt           # 의존성 패키지 설치
python -m pip install --upgrade pip       # pip 업그레이드
python -m venv venv                       # 가상 환경 생성
venv\Scripts\activate                     # 가상 환경 활성화
deactivate                                # 가상 환경 비활성화

netstat -a -o                             # 네트워크 포트 확인
taskkill /f /pid PID번호                  # 특정 PID 프로세스 종료

protoc -I=protos --python_out=protos protos/delivery_status.proto        # ProtoBuf 컴파일
protoc --proto_path=. -I . --python_out=. --pyi_out=. ./realtime_status.proto  # 실시간 상태 proto 파일 컴파일



======================================================================================
2. Docker 및 Docker Compose 명령어

docker-compose down                                   # 기존 컨테이너 중지 및 제거
docker-compose build                                  # Docker 이미지 빌드
docker-compose -f docker/DockerFile build --no-cache  # Docker 이미지 빌드 (캐시 미사용)
docker-compose up                                     # Docker 컨테이너 실행
docker-compose up -d                                  # Docker 컨테이너 실행 (백그라운드 모드)
docker-compose -f docker/docker-compose.yaml up -d    # 특정 compose 파일 실행

docker-compose ps                                     # 실행 상태 확인
docker images                                         # 도커 이미지 목록 확인
docker-compose logs -f                                # 실시간 로그 확인

docker exec -it <container_name> /bin/bash            # 컨테이너 내부 접근
docker cp test-kafka.py <container_name>:/path/to/new_directory/  # 컨테이너에 파일 복사




======================================================================================
3. Kafka CLI 명령어

docker exec -it kafka kafka-topics --list --bootstrap-server localhost:9092  # Kafka 토픽 목록 조회
/usr/bin/kafka-topics --bootstrap-server localhost:9092 --delete --topic delivery-data  # 특정 토픽 삭제


4. Redis 명령어
서버 실행
redis-server.exe

다른 포트로 실행
redis-server.exe --port 6380

포트번호로 포트 점유 확인
netstat -ano | findstr :6379

PID를 통해 프로세스 애플리케이션 확인
tasklist | findstr 8444

서버 종료 (포트 다운) 보통 PID를 봐야함
taskkill /PID 8444 /F



======================================================================================
4. Google Cloud Platform (GCP) 명령어

gcloud auth activate-service-account --key-file=C:\MyMain\dashboard\secrets\google\credentials.json  # 서비스 계정 인증
gcloud init                                   # 초기화
gcloud auth login                             # 인증 로그인
gcloud auth list                              # 인증 목록 조회
gcloud config set project [PROJECT_ID]        # 프로젝트 ID 설정
gcloud config set account                     # 계정 설정
gcloud projects list                          # 프로젝트 목록 조회
gcloud auth revoke --all                      # 모든 인증 해제

$PROJECT_ID = "dashboard-440518"
$IMAGE_NAME = "fastapi-webhook"

docker run -e PORT=8080 -p 8080:8080 asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwah-data/${IMAGE_NAME}:latest  # Docker 실행
docker build --no-cache -t asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwahkr-artifactregistry/${IMAGE_NAME}:latest -f docker/Dockerfile-fastapi .  # Docker 이미지 빌드
docker push asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwahkr-artifactregistry/${IMAGE_NAME}:latest  # Artifact Registry에 이미지 푸시
gcloud auth configure-docker asia-northeast3-docker.pkg.dev  # Artifact Registry Docker 인증
gcloud run deploy SERVICE_NAME --image=asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwah-data/${IMAGE_NAME}:latest --region=asia-northeast3  # 수동 배포




====================================================================================
5. Cloud Function 로컬 테스트 명령어

# Functions Framework 구동
python -m functions_framework --target=kafka_stream --source=src/api/cloud_function_api.py  

# 로컬 Cloud Function 데이터 테스트
Invoke-WebRequest -Uri "http://127.0.0.1:8080" -Method POST -ContentType "application/json" -InFile "data/data.json"  

Invoke-WebRequest -Uri "http://127.0.0.1:8080/webhook" -Method POST -ContentType "application/json" -InFile "data/data.json"



# 로컬에서 Uvicorn 구동
uvicorn src.api.main_api:app --host 0.0.0.0 --port 8080


6. Redis


=============================================================================
7. 프로젝트 구조 (파일 및 폴더)

main/
│
├── docker/                      # Docker 관련 설정
│   ├── docker-compose.yaml
│   ├── Dockerfile
├── src/                         # 소스 코드
│   ├── data/                        # 데이터 계층 (저장소별 데이터 관리)
│   │    ├── __init__.py
│   │    ├── redis_client.py          # Redis 데이터 저장/불러오기
│   │    ├── bigquery_client.py       # BigQuery 데이터 저장/쿼리
│   │    ├── gcs_client.py            # GCS 데이터 업로드/다운로드
│   ├── routes/                  # API 라우팅
│   │   ├── __init__.py
│   │   ├── gcs_routes.py           # gcs 관련 API
│   │   ├── vm_routes.py           # computeengine(gcp) 관련 API
│   │   ├── bigquery_routes.py           # bigquery 관련 API
│   │   ├── gcp_routes.py           # appengine + 기타 gcp 관련 API
│   │   ├── dash_routes.py       # Dash 페이지 api 호출 라우팅 콜백 통합
│   ├── services/                # 비즈니스 로직 및 데이터 처리
│   │   ├── __init__.py
│   │   ├── pubsub_service.py    # Pub/Sub 관련 로직
│   │   ├── redis_service.py     # Redis 데이터 처리
│   │   ├── gcs_service.py       # GCS 데이터 처리
│   │   ├── bigquery_service.py  # BigQuery 데이터 처리
│   │   ├── sheet_service.py   # 구글 시트 관련 로직
│   │   ├── data_processing.py   # 데이터 전처리 및 변환 (PySpark 포함)
│   │   └── dash_service.py    # dash 관련 서비스 로직
│   ├── dash_views/                    # Dash 웹 페이지 (뷰)
│   │   ├── __init__.py
│   │   ├── styles.py        # 공통 스타일
│   │   ├── delivery_page.py     # 배송 현황 페이지
│   │   ├── driver_page.py       # 기사 현황 페이지
│   │   ├── components.py       # 공통 컴포넌트
│   │   ├── layouts.py       # 공통 레이아웃
│   │   ├── main_page.py         # 메인 페이지
│   │   ├── custom.css 	# 공통 css
│   │   ├── data_generate.py       # 데이터 생성

│   ├── utils/                   # 공통 유틸리티
│   │   ├── __init__.py
│   │   ├── utils_main.py           # 공통 함수
│   │   ├── error_handling.py    # 에러 처리 및 로깅
│   │   ├── file_utils.py        # 파일 처리 관련 유틸리티
│   │   └── validation.py        # 데이터 검증 로직
│   ├── config/                  # 환경설정
│   │   ├── __init__.py
│   │   ├── redis_config.py
│   │   ├── gcp_config.py	   # gcp 관련 설정 집합
│   │   ├── settings.py          # 공통 설정
│   ├── main.py                  # 최종 프로젝트 엔트리 포인트
│   ├── .env                 
├── requirements.txt             # Python 종속성
├── README.md                    # 프로젝트 문서
├── app.yaml                     # App Engine 설정
├── .gitignore                   # Git 무시 파일



main
│── data/
│   ├── data1.json
│   ├── data2.json
│   ├── data3.json
│   ├── data4.json
│   ├── data5.json
│── docker/
│   ├── DockerFile	
│   ├── docker-compose.yaml	
│── src/
│   ├──apitest.py
│   ├── dashboard.py
│   ├── test-servicetest.py
│   │── main.py
│── static/
│   ├──dashboard.css
│   ├── dashsboard.js
│── template/
│   ├──dashboard.html


====================================================================================
8. 추가 JAR 파일 목록

commons-pool2-2.11.1.jar
kafka-clients-3.4.0.jar
spark-protobuf_2.12-3.4.1.jar
spark-sql-kafka-0-10_2.12-3.4.1.jar
spark-token-provider-kafka-0-10_2.12-3.4.1.jar
====================================================================================
delivery 컬럼
- **OperationType  :** 배송 or 회수
- **Department :** 부서
- **Driver**: 배송 기사
- **DepartTime**: 출발 시간 (HH:mm 형식) 
- **ArriveTime**: 도착 시간 (HH:mm 형식) 
- **DeliveryDuration** : 배송 예상 소요시간 (00분 )
- Status : 배송 상태 (대기, 배송중, 배송완료)
- **DPS**: 배송 일련번호.
- **ETA**: 예상 도착 시간 (yyyy-mm-dd HH:mm 형식).
- **SLA**: 서비스 레벨 계약 정보
- **Address**: 배송지 주소. (예시 30자 이상 한국주소)
- **Recipient**: 수령인 이름

driver 컬럼
- **Name :**
- **Status :**
- **ArrivalTime :00분**
- **VehicleType : 차량 종류**
- Q’ty:
