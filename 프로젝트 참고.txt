1. 패키지 설치 및 환경 설정 명령어

pip install -r requirements.txt           # 의존성 패키지 설치
python -m pip install --upgrade pip       # pip 업그레이드
python -m venv venv                       # 가상 환경 생성
venv\Scripts\activate                     # 가상 환경 활성화
deactivate                                # 가상 환경 비활성화

netstat -a -o                             # 네트워크 포트 확인
taskkill /f /pid PID번호                  # 특정 PID 프로세스 종료

protoc -I=protos --python_out=protos protos/delivery_status.proto        # ProtoBuf 컴파일
protoc --proto_path=. -I . --python_out=. --pyi_out=. ./realtime_status.proto  # 실시간 상태 proto 파일 컴파일



======================================================================================
2. Docker 및 Docker Compose 명령어

docker-compose down                                   # 기존 컨테이너 중지 및 제거
docker-compose build                                  # Docker 이미지 빌드
docker-compose -f docker/DockerFile build --no-cache  # Docker 이미지 빌드 (캐시 미사용)
docker-compose up                                     # Docker 컨테이너 실행
docker-compose up -d                                  # Docker 컨테이너 실행 (백그라운드 모드)
docker-compose -f docker/docker-compose.yaml up -d    # 특정 compose 파일 실행

docker-compose ps                                     # 실행 상태 확인
docker images                                         # 도커 이미지 목록 확인
docker-compose logs -f                                # 실시간 로그 확인

docker exec -it <container_name> /bin/bash            # 컨테이너 내부 접근
docker cp test-kafka.py <container_name>:/path/to/new_directory/  # 컨테이너에 파일 복사




======================================================================================
3. Kafka CLI 명령어

docker exec -it kafka kafka-topics --list --bootstrap-server localhost:9092  # Kafka 토픽 목록 조회
/usr/bin/kafka-topics --bootstrap-server localhost:9092 --delete --topic delivery-data  # 특정 토픽 삭제


4. Redis 명령어
서버 실행
redis-server.exe

다른 포트로 실행
redis-server.exe --port 6380

포트번호로 포트 점유 확인
netstat -ano | findstr :6379

PID를 통해 프로세스 애플리케이션 확인
tasklist | findstr 8444

서버 종료 (포트 다운) 보통 PID를 봐야함
taskkill /PID 8444 /F



======================================================================================
4. Google Cloud Platform (GCP) 명령어

gcloud auth activate-service-account --key-file=C:\MyMain\dashboard\secrets\google\credentials.json  # 서비스 계정 인증
gcloud init                                   # 초기화
gcloud auth login                             # 인증 로그인
gcloud auth list                              # 인증 목록 조회
gcloud config set project [PROJECT_ID]        # 프로젝트 ID 설정
gcloud config set account                     # 계정 설정
gcloud projects list                          # 프로젝트 목록 조회
gcloud auth revoke --all                      # 모든 인증 해제

$PROJECT_ID = "dashboard-440518"
$IMAGE_NAME = "fastapi-webhook"

docker run -e PORT=8080 -p 8080:8080 asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwah-data/${IMAGE_NAME}:latest  # Docker 실행
docker build --no-cache -t asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwahkr-artifactregistry/${IMAGE_NAME}:latest -f docker/Dockerfile-fastapi .  # Docker 이미지 빌드
docker push asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwahkr-artifactregistry/${IMAGE_NAME}:latest  # Artifact Registry에 이미지 푸시
gcloud auth configure-docker asia-northeast3-docker.pkg.dev  # Artifact Registry Docker 인증
gcloud run deploy SERVICE_NAME --image=asia-northeast3-docker.pkg.dev/${PROJECT_ID}/teckwah-data/${IMAGE_NAME}:latest --region=asia-northeast3  # 수동 배포




====================================================================================
5. Cloud Function 로컬 테스트 명령어

# Functions Framework 구동
python -m functions_framework --target=kafka_stream --source=src/api/cloud_function_api.py  

# 로컬 Cloud Function 데이터 테스트
Invoke-WebRequest -Uri "http://127.0.0.1:8080" -Method POST -ContentType "application/json" -InFile "data/data.json"  

Invoke-WebRequest -Uri "http://127.0.0.1:8080/webhook" -Method POST -ContentType "application/json" -InFile "data/data.json"



# 로컬에서 Uvicorn 구동
uvicorn src.api.main_api:app --host 0.0.0.0 --port 8080





=============================================================================
6. 분석 목표 및 트렌드 모니터링 주제

실시간 배송 상태 및 KPI 모니터링 
	-테이블 대시보드

배송 트렌드 분석 :  SLA 타입별, 요일별 배송 개수, 위치별 배송 갯수, 기사별 배송 갯수 및 거리
	- 히트맵

배송 트렌드 분석 : SLA 타입별 배송 개수, 요일별 배송 개수, 위치별 배송 갯수, 기사별 배송 갯수 및 거리
	- 히트맵, 막대, 선 그래프, 


1. dashboard 용 토픽 ('Delivery', 'DPS', 'ETA', 'SLA', 'Address', 'Status', 'Billed Distance', 'Recipient') 이 토픽은 고정이야
2. 각 지역별 배송 히트맵 및 트렌드
   지역별 자주 배송 가는 지역
   지역별 분류별 트렌드
   지역별 기사 배차 트렌드
   
3. data(주문접수) 요일별 시간별 배송 접수 트렌드 
   어떤 요일에 많은 량이 접수되는가, 어떤 분류가 어떤 요일에 많이 접수되는가
   미스가 난다면 어떤요일에 어떤 분류가 많이 접수 미스가 나는가
   어떤 요일 어떤 시간에 많이 접수되는가 (1시간 단위)
4. 특정 시간대에 특정 지역으로의 배송량 확인
    traffic jam인 시간대에 eta로 접수되어 긴급한 배송 건수

=============================================================================
7. 프로젝트 구조 (파일 및 폴더)

main/
├── data/
│   ├── data.json
│   └── CS_Delivery_Report.csv
├── docker/
│   ├── docker-compose.yaml
│   ├── Dockerfile
├── src/
│   ├── __init__.py
│   ├── main.py
│   ├── routes/
│   │   ├── __init__.py
│   │   ├── webhook.py
│   │   ├── dashboard.py
│   │   └── dash_app.py           # Dash integration
│   ├── services/
│   │   ├── __init__.py
│   │   ├── pubsub.py
│   │   ├── redis_service.py
│   │   ├── gcs_service.py
│   │   └── bigquery_service.py
│   ├── models/
│   │   ├── __init__.py
│   │   └── request_model.py
│   ├── dash/                # For Dash templates
├── requirements.txt
├── .env
├── app.yaml                           # App Engine configuration
├── README.md
├── .gitignore


====================================================================================
8. 추가 JAR 파일 목록

commons-pool2-2.11.1.jar
kafka-clients-3.4.0.jar
spark-protobuf_2.12-3.4.1.jar
spark-sql-kafka-0-10_2.12-3.4.1.jar
spark-token-provider-kafka-0-10_2.12-3.4.1.jar
====================================================================================
9. 대시보드 필요 컬럼
Delivery(Delivery Type)
OrderDate(YYMMDDHH)
DPS(Serial Number)
ETA(YYMMDDHHMM)
SLA(Service Type)
Address
Zipcode
BilledDistance
DepartureTime 
ArrivalTime 
DeliveryTime




-------------------------------------------------------------
Delivery	
DepartTime	
ArriveTime	
DPS	
VehicleType	
OrderDate	
ETA	
SLA	
Address	
ZipCode	
BilledDistance
Recipient
BillingCost (숨김예정)


Delivery - Type1(담당 Warehouse),Type2(고정, 퀵), Type3(퀵 OrderNumber, 고정기사)
	광주,부산,대전
	고정기사 
	퀵Number 

지역별 예상 소요시간 값 머신러닝 학습을 하기 위한 프로세스 설정
1. 각 특정 지역별을 우편번호 패턴을 묶어 평균 거리 및 소요시간 값 확인

2. 지금까지의 배송 건들을 전부 입력하여 패턴별 지역을 어림잡아 소요시간 값 확인







ENV=development
REDIS_HOST=localhost
REDIS_PORT=6379
GCS_BUCKET_NAME=your-local-gcs-bucket-name
PUBSUB_TOPIC=your-local-pubsub-topic

